package application_billets;

import communicator.Communicator;
import communicator.CommunicatorException;
import encryption.Encrypt;
import encryption.EncryptionException;
import entities.Flight;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;
import login.ConnectionException;
import login.ParentLoginFrame;
import tickmap.reponse.*;
import tickmap.requete.*;

public class JFrameBillets extends ParentLoginFrame {
	private Communicator communicator;
	private SecretKey cleAuth;
	private SecretKey cleChiff;

	private KeyStore keystore;
	private PrivateKey clePrivee;
	private PublicKey clePubliqueServeur;

	//certificats
	private PrivateKey cleCertPrivee;
	private PublicKey cleCertPublique;

	private ArrayList<Flight> flights;
	private Flight selectedFlight;

    /** Creates new form JFrameBillets */
    public JFrameBillets() {
        initComponents();

		setIpAddress("127.0.0.1");
        setPort("26070");
        setLogin("toto");
        setPassword("mdp");
        showConnectionDialog();

		getFlights();
    }

	private void getFlights(){
		try {
			this.communicator.SendSerializable(new RequeteTICKMAP_vols());
			ReponseTICKMAP_vols reponse = this.communicator.receiveSerializable(ReponseTICKMAP_vols.class);
			if(!reponse.isSuccessful()){
                this.flights = new ArrayList<>();
                System.err.println(reponse.getMessage());
                JOptionPane.showMessageDialog(this, reponse.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
			else{
				this.flights = reponse.getFlights();
			}
		} catch (CommunicatorException ex) {
			Logger.getLogger(JFrameBillets.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Reserver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exitProcedure();
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2){
            int i = jTable1.getSelectedRow();
			boolean selected = false;
            if (i!=-1){
				this.selectedFlight = flights.get(i);
				selected = true;
            }
			else{
				this.selectedFlight = null;
				selected = false;
			}

			this.jButton1.setEnabled(selected);
		}
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameBillets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameBillets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameBillets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameBillets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameBillets().setVisible(true);
            }
        });
    }

	@Override
	protected void connect() throws ConnectionException {
		try {
            Socket clientSocket = new Socket(this.getIpAddress(), Integer.parseInt(this.getPort()));

            this.communicator = new Communicator(clientSocket);

            double rand = Math.random();
            long time= (new Date()).getTime();
            this.communicator.SendSerializable(new RequeteTICKMAP_login(this.getLogin(), Encrypt.saltDigest(this.getPassword(), time, rand), time, rand));
            ReponseTICKMAP_login reponse = this.communicator.receiveSerializable(ReponseTICKMAP_login.class);
            if(!reponse.isSuccessful()){
                System.err.println(reponse.getMessage());
                throw new ConnectionException(reponse.getMessage());
            }

			this.keystore = KeyStore.getInstance("PKCS12", "BC");
			this.keystore.load(new FileInputStream("url"), "loloA1".toCharArray());
			Enumeration enumeration = this.keystore.aliases();
			Vector vAlias = new Vector();
			while(enumeration.hasMoreElements())
					vAlias.add(enumeration.nextElement());
			Object[] aliases = vAlias.toArray();
			String aliasCourant = (String) aliases[0];

			this.clePrivee = (PrivateKey) this.keystore.getKey("client", "loloA1".toCharArray());

			X509Certificate certificat = (X509Certificate) this.keystore.getCertificate(aliasCourant);
			this.cleCertPublique = certificat.getPublicKey();

			this.communicator.SendSerializable(new RequeteTICKMAP_echange(cleCertPublique));
			ReponseTICKMAP_echange reponseEchange = this.communicator.receiveSerializable(ReponseTICKMAP_echange.class);
			if(!reponseEchange.isSuccessful()){
                System.err.println(reponseEchange.getMessage());
                throw new ConnectionException(reponseEchange.getMessage());
            }
			this.clePubliqueServeur = reponseEchange.getKey();

			this.communicator.SendSerializable(new RequeteTICKMAP_cleSym());
			ReponseTICKMAP_cleSym reponseSym = this.communicator.receiveSerializable(ReponseTICKMAP_cleSym.class);
			if(!reponseSym.isSuccessful()){
                System.err.println(reponseSym.getMessage());
                throw new ConnectionException(reponseSym.getMessage());
            }
			this.cleAuth = reponseSym.getCleAuth(clePrivee);
			this.cleChiff = reponseSym.getCleChiff(clePrivee);
        } catch (IOException | CommunicatorException | EncryptionException
				| KeyStoreException | NoSuchProviderException | NoSuchAlgorithmException
				| CertificateException | UnrecoverableKeyException | InvalidKeyException
				| NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException ex) {
            throw new ConnectionException(ex.getMessage());
		}
	}

	@Override
	protected void disconnect() throws ConnectionException {
		try {
            this.communicator.SendSerializable(new RequeteTICKMAP_logout());

            ReponseTICKMAP_logout reponse = this.communicator.receiveSerializable(ReponseTICKMAP_logout.class);

            if(!reponse.isSuccessful()){
                System.err.println(reponse.getMessage());
                throw new ConnectionException(reponse.getMessage());
            }

        } catch (CommunicatorException ex) {
            throw new ConnectionException(ex.getMessage());
        }
	}

	protected void exitProcedure(){
        try {
            disconnect();
            this.communicator.close();
        } catch (ConnectionException | CommunicatorException ex) {
            Logger.getLogger(JFrameBillets.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.dispose();
        System.exit(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
